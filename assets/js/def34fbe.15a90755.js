(self.webpackChunkdoc=self.webpackChunkdoc||[]).push([[8305],{3905:(e,t,n)=>{"use strict";n.d(t,{Zo:()=>m,kt:()=>d});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function l(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?l(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):l(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},l=Object.keys(e);for(r=0;r<l.length;r++)n=l[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(r=0;r<l.length;r++)n=l[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var o=r.createContext({}),c=function(e){var t=r.useContext(o),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},m=function(e){var t=c(e.components);return r.createElement(o.Provider,{value:t},e.children)},p="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},h=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,l=e.originalType,o=e.parentName,m=s(e,["components","mdxType","originalType","parentName"]),p=c(n),h=a,d=p["".concat(o,".").concat(h)]||p[h]||u[h]||l;return n?r.createElement(d,i(i({ref:t},m),{},{components:n})):r.createElement(d,i({ref:t},m))}));function d(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var l=n.length,i=new Array(l);i[0]=h;var s={};for(var o in t)hasOwnProperty.call(t,o)&&(s[o]=t[o]);s.originalType=e,s[p]="string"==typeof e?e:a,i[1]=s;for(var c=2;c<l;c++)i[c]=n[c];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}h.displayName="MDXCreateElement"},1410:e=>{e.exports={title:"mind-ar-js",tagline:"web augmented reality - augmented images",url:"https://hiukim.github.io",baseUrl:"/mind-ar-js-doc/",onBrokenLinks:"warn",onBrokenMarkdownLinks:"warn",favicon:"img/favicon.png",organizationName:"hiukim",projectName:"mind-ar-js-doc",themeConfig:{navbar:{title:"MindAR - Documentation",logo:{alt:"MindAR",src:"img/logo.png"}}},plugins:["docusaurus-plugin-sass"],presets:[["@docusaurus/preset-classic",{docs:{routeBasePath:"/",sidebarPath:6679},blog:{showReadingTime:!0,editUrl:"https://github.com/facebook/docusaurus/edit/master/website/blog/"},theme:{customCss:2295}}]],scripts:["https://cdnjs.cloudflare.com/ajax/libs/dropzone/5.7.2/min/dropzone.min.js","https://cdn.jsdelivr.net/gh/hiukim/mind-ar-js@1.1.5/dist/mindar-image.prod.js"],stylesheets:["https://cdnjs.cloudflare.com/ajax/libs/dropzone/5.7.2/dropzone.min.css"],customFields:{libVersion:"1.2.5"}}},6679:e=>{e.exports={docs:[{type:"doc",id:"home"},{type:"doc",id:"installation"},{type:"doc",id:"installation-v1-1-x"},{type:"category",label:"Image Tracking Quick Start",collapsed:!0,items:["quick-start/overview","quick-start/compile","quick-start/webpage","quick-start/run","quick-start/assets","quick-start/wrapup","quick-start/tracking-config"]},{type:"category",label:"Image Tracking Examples",collapsed:!0,items:["examples/summary","examples/minimal","examples/basic","examples/multi-targets","examples/multi-tracks","examples/custom-ui","examples/events-handling","examples/interative"]},{type:"category",label:"Face Tracking Quick Start",collapsed:!0,items:["face-tracking-quick-start/overview","face-tracking-quick-start/webpage","face-tracking-quick-start/run","face-tracking-quick-start/assets","face-tracking-quick-start/occluder","face-tracking-quick-start/wrapup"]},{type:"category",label:"Face Tracking Examples",collapsed:!0,items:["face-tracking-examples/summary","face-tracking-examples/minimal","face-tracking-examples/tryon","face-tracking-examples/events-handling"]},{type:"category",label:"More Examples",collapsed:!0,items:["more-examples/react","more-examples/threejs-image","more-examples/threejs-face","more-examples/threejs-face-facemesh","more-examples/threejs-face-blendshapes"]},{type:"category",label:"Tools",collapsed:!0,items:["tools/compile"]}]}},5532:(e,t,n)=>{"use strict";n.r(t),n.d(t,{assets:()=>m,contentTitle:()=>o,default:()=>h,frontMatter:()=>s,metadata:()=>c,toc:()=>p});var r=n(7462),a=(n(7294),n(3905)),l=n(1410),i=n(4996);const s={id:"threejs-face-blendshapes",title:"ThreeJS Blendshapes",sidebar_label:"ThreeJS Blendshapes"},o=void 0,c={unversionedId:"more-examples/threejs-face-blendshapes",id:"more-examples/threejs-face-blendshapes",title:"ThreeJS Blendshapes",description:"There is 52 blendshapes scores representing the facial expressions of the detected face. This example shows how you can control a avatar head with the detected blendshapes.",source:"@site/docs/more-examples/threejs-face-blendshapes.md",sourceDirName:"more-examples",slug:"/more-examples/threejs-face-blendshapes",permalink:"/mind-ar-js-doc/more-examples/threejs-face-blendshapes",draft:!1,tags:[],version:"current",frontMatter:{id:"threejs-face-blendshapes",title:"ThreeJS Blendshapes",sidebar_label:"ThreeJS Blendshapes"},sidebar:"docs",previous:{title:"ThreeJS FaceMesh",permalink:"/mind-ar-js-doc/more-examples/threejs-face-facemesh"},next:{title:"Image Targets Compiler",permalink:"/mind-ar-js-doc/tools/compile"}},m={},p=[{value:"Try it out",id:"try-it-out",level:2},{value:"List of blendshapes",id:"list-of-blendshapes",level:2}],u={toc:p};function h(e){let{components:t,...s}=e;return(0,a.kt)("wrapper",(0,r.Z)({},u,s,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("p",null,"There is 52 blendshapes scores representing the facial expressions of the detected face. This example shows how you can control a avatar head with the detected blendshapes.  "),(0,a.kt)("h2",{id:"try-it-out"},"Try it out"),(0,a.kt)("a",{href:(0,i.Z)("/face-tracking-samples/three-blendshapes.html"),target:"_blank"},"Live Demo"),(0,a.kt)("p",null,(0,a.kt)("img",{alt:"img",src:n(783).Z,width:"300",height:"268"})),(0,a.kt)("p",null,"Credit: the racoon avatar 3D model used in this example comes from ",(0,a.kt)("a",{href:"https://developers.google.com/mediapipe",target:"_blank"},"mediapipe")),(0,a.kt)("code",null,`\n<html>\n  <head>\n    <meta name="viewport" content="width=device-width, initial-scale=1.0">\n    <script type="importmap">\n    {\n      "imports": {\n        "three": "https://unpkg.com/three@0.160.0/build/three.module.js",\n        "three/addons/": "https://unpkg.com/three@0.160.0/examples/jsm/",\n        "mindar-face-three":"https://cdn.jsdelivr.net/npm/mind-ar@${l.customFields.libVersion}/dist/mindar-face-three.prod.js"\n      }\n    }\n    <\/script>\n    <script type="module">\n      import * as THREE from 'three';\n      import { GLTFLoader } from 'three/addons/loaders/GLTFLoader.js';\n      import { MindARThree } from 'mindar-face-three';\n      class Avatar {\n        constructor() {\n          this.gltf = null;\n          this.morphTargetMeshes = [];\n        }\n        async init() {\n          const url = "https://assets.codepen.io/9177687/raccoon_head.glb";\n          const gltf = await new Promise((resolve) => {\n            const loader = new GLTFLoader();\n            loader.load(url, (gltf) => {\n              resolve(gltf);\n            });\n          });\n          gltf.scene.traverse((object) => {\n            if ((object).isBone && !this.root) {\n              this.root = object; // as THREE.Bone;\n            }\n            if (!(object).isMesh) return\n            const mesh = object;\n            if (!mesh.morphTargetDictionary || !mesh.morphTargetInfluences) return\n            this.morphTargetMeshes.push(mesh);\n          });\n          this.gltf = gltf;\n        }\n        updateBlendshapes(blendshapes) {\n          const categories = blendshapes.categories;\n          let coefsMap = new Map();\n          for (let i = 0; i < categories.length; ++i) {\n            coefsMap.set(categories[i].categoryName, categories[i].score);\n          }\n          for (const mesh of this.morphTargetMeshes) {\n            if (!mesh.morphTargetDictionary || !mesh.morphTargetInfluences) {\n              continue;\n            }\n            for (const [name, value] of coefsMap) {\n              if (!Object.keys(mesh.morphTargetDictionary).includes(name)) {\n                continue;\n              }\n              const idx = mesh.morphTargetDictionary[name];\n              mesh.morphTargetInfluences[idx] = value;\n            }\n          }\n        }\n      }\n      let mindarThree = null;\n      let avatar = null;\n      const setup = async () => {\n        mindarThree = new MindARThree({\n          container: document.querySelector("#container"),\n        });\n        const { renderer, scene, camera } = mindarThree;\n        const light = new THREE.HemisphereLight(0xffffff, 0xbbbbff, 1);\n        scene.add(light);\n        const anchor = mindarThree.addAnchor(1);\n        await avatar.init();\n        avatar.gltf.scene.scale.set(2, 2, 2);\n        anchor.group.add(avatar.gltf.scene);\n      }\n      const start = async () => {\n        if (!mindarThree) {\n          await setup();\n        }\n        await mindarThree.start();\n        const { renderer, scene, camera } = mindarThree;\n        const feedVideo = document.querySelector("#video-feed");\n        feedVideo.srcObject = mindarThree.video.srcObject.clone();\n        feedVideo.play();\n        renderer.setAnimationLoop(() => {\n          const estimate = mindarThree.getLatestEstimate();\n          if (estimate && estimate.blendshapes) {\n            avatar.updateBlendshapes(estimate.blendshapes);\n          }\n          renderer.render(scene, camera);\n        });\n      }\n      start();\n    <\/script>\n    <style>\n      body {\n        margin: 0;\n      }\n      #container {\n        width: 100vw;\n        height: 100vh;\n        position: relative;\n        overflow: hidden;\n      }\n      #video-feed {\n        position: fixed;\n        bottom: 0;\n        left: 0;\n        width: 50vw;\n        z-index: 9999999;\n        transform: scaleX(-1);\n      }\n    </style>\n  </head>\n  <body>\n    <div id="container">\n    </div>\n    <video id="video-feed">\n    </video>\n  </body>\n</html>\n`),(0,a.kt)("h2",{id:"list-of-blendshapes"},"List of blendshapes"),(0,a.kt)("ol",null,(0,a.kt)("li",null,"browDownLeft"),(0,a.kt)("li",null,"browDownRight"),(0,a.kt)("li",null,"browInnerUp"),(0,a.kt)("li",null,"browOuterUpLeft"),(0,a.kt)("li",null,"browOuterUpRight"),(0,a.kt)("li",null,"cheekPuff"),(0,a.kt)("li",null,"cheekSquintLeft"),(0,a.kt)("li",null,"cheekSquintRight"),(0,a.kt)("li",null,"eyeBlinkLeft"),(0,a.kt)("li",null,"eyeBlinkRight"),(0,a.kt)("li",null,"eyeLookDownLeft"),(0,a.kt)("li",null,"eyeLookDownRight"),(0,a.kt)("li",null,"eyeLookInLeft"),(0,a.kt)("li",null,"eyeLookInRight"),(0,a.kt)("li",null,"eyeLookOutLeft"),(0,a.kt)("li",null,"eyeLookOutRight"),(0,a.kt)("li",null,"eyeLookUpLeft"),(0,a.kt)("li",null,"eyeLookUpRight"),(0,a.kt)("li",null,"eyeSquintLeft"),(0,a.kt)("li",null,"eyeSquintRight"),(0,a.kt)("li",null,"eyeWideLeft"),(0,a.kt)("li",null,"eyeWideRight"),(0,a.kt)("li",null,"jawForward"),(0,a.kt)("li",null,"jawLeft"),(0,a.kt)("li",null,"jawOpen"),(0,a.kt)("li",null,"jawRight"),(0,a.kt)("li",null,"mouthClose"),(0,a.kt)("li",null,"mouthDimpleLeft"),(0,a.kt)("li",null,"mouthDimpleRight"),(0,a.kt)("li",null,"mouthFrownLeft"),(0,a.kt)("li",null,"mouthFrownRight"),(0,a.kt)("li",null,"mouthFunnel"),(0,a.kt)("li",null,"mouthLeft"),(0,a.kt)("li",null,"mouthLowerDownLeft"),(0,a.kt)("li",null,"mouthLowerDownRight"),(0,a.kt)("li",null,"mouthPressLeft"),(0,a.kt)("li",null,"mouthPressRight"),(0,a.kt)("li",null,"mouthPucker"),(0,a.kt)("li",null,"mouthRight"),(0,a.kt)("li",null,"mouthRollLower"),(0,a.kt)("li",null,"mouthRollUpper"),(0,a.kt)("li",null,"mouthShrugLower"),(0,a.kt)("li",null,"mouthShrugUpper"),(0,a.kt)("li",null,"mouthSmileLeft"),(0,a.kt)("li",null,"mouthSmileRight"),(0,a.kt)("li",null,"mouthStretchLeft"),(0,a.kt)("li",null,"mouthStretchRight"),(0,a.kt)("li",null,"mouthUpperUpLeft"),(0,a.kt)("li",null,"mouthUpperUpRight"),(0,a.kt)("li",null,"noseSneerLeft"),(0,a.kt)("li",null,"noseSneerRight"),(0,a.kt)("li",null,"tongueOut")))}h.isMDXComponent=!0},783:(e,t,n)=>{"use strict";n.d(t,{Z:()=>r});const r=n.p+"assets/images/face-blendshapes-demo-d6876fb6bb204978ca591e2ba11978b3.gif"}}]);